from antcolony import AntColony
from antgraph import AntGraph

import numpy
import sys
import traceback


def matrix_to_tuple(matrix, col_map):
    """Takes in a numpy matrix and a dictionary mapping
    column numbers to the names that represent them into a
    tuple of lists to be used with ant colony"""
    rows = []
    for row in xrange(len(matrix)):
	rows.append(matrix[row])
    return (col_map.values(), rows)

def solve_tsp(matrix, col_map):
    num_nodes = len(matrix)

    if num_nodes <= 10:
        num_ants = 20
        num_iterations = 12
        num_repetitions = 1
    else:
        num_ants = 28
        num_iterations = 20
        num_repetitions = 1

    stuff = matrix_to_tuple(matrix, col_map) 
    #print stuff
    cities = stuff[0]
    cost_mat = stuff[1]

    if num_nodes < len(cost_mat):
        cost_mat = cost_mat[0:num_nodes]
        for i in range(0, num_nodes):
            cost_mat[i] = cost_mat[i][0:num_nodes]

    #print cost_mat

    try:
        graph = AntGraph(num_nodes, cost_mat)
        best_path_vec = None
        best_path_cost = sys.maxint
        for i in range(0, num_repetitions):
            graph.reset_tau()
            ant_colony = AntColony(graph, num_ants, num_iterations)
            ant_colony.start()
            if ant_colony.best_path_cost < best_path_cost:
                best_path_vec = ant_colony.best_path_vec
                best_path_cost = ant_colony.best_path_cost

        print "\n------------------------------------------------------------"
        print "                     Results                                "
        print "------------------------------------------------------------"
        print "\nBest path = %s" % (best_path_vec,)
	for node in best_path_vec:
            print cities[node] + " ",
        print "\nBest path cost = %s\n" % (best_path_cost,)
	return ([cities[node] for node in best_path_vec], best_path_cost)
    
    except Exception, e:
        print "exception: " + str(e)
        traceback.print_exc()

if __name__ == "__main__":   
   main(sys.argv)
