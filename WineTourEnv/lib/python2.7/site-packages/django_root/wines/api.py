from tastypie import fields
from tastypie.authentication import Authentication
from tastypie.authorization import Authorization
from tastypie.resources import ModelResource
from models import Wine, WineProducer

FORMATS = {
    'xml': 'application/xml',
    'json': 'application/json',
    'jsonp': 'text/javascript',
    'yaml': 'text/yaml'
}

class CustomResource(ModelResource):
    """Provides customizations of ModelResource"""
    def determine_format(self, request):
	"""Provide logic to provide JSON responses as default"""
	if 'format' in request.GET:
	    if request.GET['format'] in FORMATS:
		return FORMATS[request.GET['format']]
	    else:
		return 'text/html' #Hacky way to prevent incorrect formats
	else:
	    return 'application/json'

class WineProducerResource(CustomResource):
    wine = fields.ToManyField('wines.api.WineResource', 'wine_set', 
			     related_name='wine_producer')
    class Meta:
	queryset = WineProducer.objects.all()
	resource_name = 'wine_producer'
	authentication = Authentication() #allows all access
	authorization = Authorization() #allows all access
    
class WineResource(CustomResource):
    wine_producer = fields.ForeignKey(WineProducerResource, 'wine_producer')
    
    class Meta:
	queryset = Wine.objects.all()
	resource_name = 'wine'
	authentication = Authentication() #allows all access
	authorization = Authorization() #allows all access
	filtering = {
	    'percent_new_oak': ('exact', 'lt', 'gt', 'lte', 'gte'),
	    'percentage_alcohol': ('exact', 'lt', 'gt', 'lte', 'gte'),
	    'color': ('exact', 'startswith'),
	    'style': ('exact', 'startswith')
	    
	}
