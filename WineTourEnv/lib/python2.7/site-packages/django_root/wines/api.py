from tastypie import fields
from tastypie.authentication import Authentication
from tastypie.authorization import Authorization
from tastypie.resources import ModelResource
from tastypie.validation import Validation
from models import Wine, WineProducer

FORMATS = {
    'xml': 'application/xml',
    'json': 'application/json',
    'jsonp': 'text/javascript',
    'yaml': 'text/yaml'
}

REQUIRED_WINE_FIELDS = [
    'name',
    'style',
    'country',
    'region',
    'wine_producer',
    'wine_type'
]

class CustomResource(ModelResource):
    """Provides customizations of ModelResource"""
    def determine_format(self, request):
	"""Provide logic to provide JSON responses as default"""
	if 'format' in request.GET:
	    if request.GET['format'] in FORMATS:
		return FORMATS[request.GET['format']]
	    else:
		return 'text/html' #Hacky way to prevent incorrect formats
	else:
	    return 'application/json'

class WineValidation(Validation):
    def is_valid(self, bundle, request=None):
	if not bundle.data:
	    return {'__all__': 'No data was detected'}

	errors = []
	for field in REQUIRED_WINE_FIELDS:
	    if not field in bundle.data.keys():
		errors.append(field)
	
	if errors:
	    return 'Missing fields: %s' % ', '.join(errors)
	else:
	    return errors

class WineProducerResource(CustomResource):
    wine = fields.ToManyField('wines.api.WineResource', 'wine_set', 
			     related_name='wine_producer')
    class Meta:
	queryset = WineProducer.objects.all()
	resource_name = 'wine_producer'
	authentication = Authentication() #allows all access
	authorization = Authorization() #allows all access
    
class WineResource(CustomResource):
    wine_producer = fields.ForeignKey(WineProducerResource, 'wine_producer')
    
    class Meta:
	queryset = Wine.objects.all()
	resource_name = 'wine'
	authentication = Authentication() #allows all access
	authorization = Authorization() #allows all access
	#validation = WineValidation()
	filtering = {
	    'percent_new_oak': ('exact', 'lt', 'gt', 'lte', 'gte'),
	    'percentage_alcohol': ('exact', 'lt', 'gt', 'lte', 'gte'),
	    'color': ('exact', 'startswith'),
	    'style': ('exact', 'startswith')
	    
	}

    def hydrate_wine_producer(self, bundle):
	"""Use the provided WineProducer ID to properly link a PUT, POST,
	or PATCH to the correct WineProducer instance in the db"""
	#Workaround since tastypie has bug and calls hydrate more than once
	try:
	    int(bundle.data['wine_producer'])
	except ValueError:
	    return bundle
	bundle.data['wine_producer'] = '/api/v1/wine_producer/%s/' % \
					    bundle.data['wine_producer']
	return bundle

