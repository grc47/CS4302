import yaml
from tastypie import fields
from tastypie.authentication import Authentication
from tastypie.authorization import Authorization
from tastypie.resources import ModelResource
from tastypie.serializers import Serializer
from tastypie.validation import Validation
from models import Wine, WineProducer

FORMATS = {
    'xml': 'application/xml',
    'json': 'application/json',
    'jsonp': 'text/javascript',
    'yaml': 'text/yaml'
}

REQUIRED_WINE_FIELDS = set([
    'name',
    'style',
    'country',
    'region',
    'wine_producer',
    'wine_type'
])

ALLOWABLE_WINE_FIELDS = set([
    'name',
    'appellation',
    'color', 
    'country',
    'fruit_source',
    'percent_new_oak',
    'percentage_alcohol',
    'region',
    'style',
    'vineyard',
    'vintage',
    'wine_producer',
    'wine_sub_region',
    'wine_type',
    'id',
    'resource_uri'
])

class CustomResource(ModelResource):
    def determine_format(self, request):
	"""Provide logic to provide JSON responses as default"""
	if 'format' in request.GET:
	    if request.GET['format'] in FORMATS:
		return FORMATS[request.GET['format']]
	    else:
		return 'text/html' #Hacky way to prevent incorrect formats
	else:
	    return 'application/json'

class CustomSerializer(Serializer):
    def to_yaml(self, data, options=None):
	"""Remove '!!python/unicode' from all yaml fields"""
	return yaml.safe_dump(self.to_simple(data, options))	

class WineValidation(Validation):
    def is_valid(self, bundle, request=None):
	if not bundle.data:
	    return {'__all__': 'No data was detected'}

	missing_fields = []
	invalid_fields = []
	
	for field in REQUIRED_WINE_FIELDS:
	    if not field in bundle.data.keys():
		missing_fields.append(field)
	for key in bundle.data.keys():
	    if not key in ALLOWABLE_WINE_FIELDS:
		invalid_fields.append(key)

	errors = missing_fields + invalid_fields if request.method != 'PATCH' \
	    else invalid_fields
	
	if errors:
	    return 'Missing fields: %s; Invalid fields: %s' % \
		    (', '.join(missing_fields), ', '.join(invalid_fields))
	else:
	    return errors

class WineProducerResource(CustomResource):
    wine = fields.ToManyField('wines.api.WineResource', 'wine_set', 
			     related_name='wine_producer')
    class Meta:
	queryset = WineProducer.objects.all()
	resource_name = 'wine_producer'
	authentication = Authentication() #allows all access
	authorization = Authorization() #allows all access
	serializer = CustomSerializer()
    
class WineResource(CustomResource):
    wine_producer = fields.ForeignKey(WineProducerResource, 'wine_producer')
    
    class Meta:
	queryset = Wine.objects.all()
	resource_name = 'wine'
	authentication = Authentication() #allows all access
	authorization = Authorization() #allows all access
	validation = WineValidation()
	serializer = CustomSerializer()
	filtering = {
	    'percent_new_oak': ('exact', 'lt', 'gt', 'lte', 'gte'),
	    'percentage_alcohol': ('exact', 'lt', 'gt', 'lte', 'gte'),
	    'color': ('exact', 'startswith'),
	    'style': ('exact', 'startswith')
	    
	}

    def hydrate_wine_producer(self, bundle):
	"""Use the provided WineProducer ID to properly link a PUT, POST,
	or PATCH to the correct WineProducer instance in the db"""
	#Workaround since tastypie has bug and calls hydrate more than once
	try:
	    int(bundle.data['wine_producer'])
	except ValueError:
	    return bundle
	bundle.data['wine_producer'] = '/api/v1/wine_producer/%s/' % \
					    bundle.data['wine_producer']
	return bundle
