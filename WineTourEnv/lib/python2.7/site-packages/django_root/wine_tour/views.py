import json
import re
import urllib

import numpy
from django.core import serializers
from django.http import HttpResponse, Http404
from django.shortcuts import render

from wines import greedy_tsp
from wines.models import Wine, WineProducer

def root(request):
    """Generate the main page"""
    return render(request, 'root.html') 

def about(request):
    """Generate the about page"""
    return render(request, 'about.html') 

def search(request):
    """Generate the search page"""
    return render(request, 'search.html') 

def search_basic(request):
    """Generate the search page"""
    return render(request, 'search_basic.html') 

def calculate(request):
    """Calculate optimal wine tour routes"""
    tsp_input = parse_query_string(request.META['QUERY_STRING'])
    print tsp_input
    routes = []
    #Populate routes with greedy_tsp
    #IMPORTANT
    #`routes` should be an ordered list of tuples, in order of best route to worst
    #Each tuple is of the following form:
    #(<start_address>, <end_address>, [list of stops IN ORDER that they are vistied])
    #See below for example
    routes.append(
	    ('2899 Joyce Lane, Merrick, NY, 11566', 
		'2899 Joyce Lane, Merrick, NY, 11566',
		['55 Ridgewood Road, Ithaca, NY 14850']))
    routes.append(
	    ('Amazon Headquarters, Seattle, WA 98119',
		'Amazon Headquarters, Seattle, WA 98119',
		['Space Needle, Seattle, WA 98119']))
    routes.append(
	    ('1600 Ampitheathre Parkway, Mountain View, CA 94043',
		'Amazon Headquarters, Seattle, WA 98119',
		['Space Needle, Seattle, WA 98119']))

    return HttpResponse(json.dumps(routes), content_type='application/json')

def build_kwargs(string):
    """Queries the database for basic filter results, returns JSON response
    `string` is a query string of constraints"""
    query_args = filter(bool, string.split('&'))
    kwargs = {}
    for arg in query_args:
	k, v = arg.split('=')
	if k.startswith('wine_num'):
	    continue
	v = urllib.unquote(v)
	if '-' in v: #Expecting two floats separated by dash
	    k += '__range'
	    v = tuple(v.split('-'))
	kwargs[k] = v 
    return kwargs

def query(request):
    """Sends the reponse with a serialized representations of all the wines
    that satisfy `kwargs`"""
    results = None
    kwargs = build_kwargs(request.META['QUERY_STRING'])
    print kwargs
    try:
	results = Wine.objects.filter(**kwargs)
    except Wine.DoesNotExist:
	raise Http404
    except ValueError:
	results = []
    return HttpResponse(
		serializers.serialize('json', results, use_natural_keys=True), 
		content_type='application/json')

def parse_query_string(string):
    """Parses a query string into a usable form for greedy_tsp"""
    constraints = filter(bool, re.split('&?wine_num=[0-9]+&', string))
    wines = {}
    count = 0
    max_winery_id = -1
    
    for constraint in constraints:
	wineries = set()
	kwargs = build_kwargs(constraint)
	results = Wine.objects.filter(**kwargs)
	for result in results:
	    wineries.add(result.wine_producer.id)
	    max_winery_id = max(max_winery_id, result.wine_producer.id)
	wines[count] = wineries
	count += 1
    
    matrix = numpy.zeros((max_winery_id+1, count))
    for wine, wineries in wines.iteritems():
	for winery in wineries:
	    matrix[winery, wine] = 1
    
    return matrix
